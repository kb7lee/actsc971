# American Put option

import numpy as np
import matplotlib.pyplot as plt

class LSTMC(object):
    
    def __init__( self, s1, r, sig1, T, M, sim, strike):
        self.s1 = s1
        self.r = r
        self.sig1 = sig1 
        self.T = T
        self.M = int(M)
        self.simulations = sim
        self.strike = strike
        self.time_unit = self.T / float(self.M)
        self.discount = np.exp(-self.r * self.time_unit)
        
    def simulation(self, seed = 123):
        np.random.seed(seed)
        self.price1_matrix = np.zeros((self.M + 1, self.simulations), dtype=np.float64)
        self.price1_matrix[0,:] = self.s1
        for t in range(1, self.M + 1):
            brownian1 = np.random.standard_normal( int(self.simulations / 2) )
            
            brownian1 = np.concatenate((brownian1, -brownian1))
            

            self.price1_matrix[t, :] = (self.price1_matrix[t - 1, :]
                                  * np.exp((self.r - self.sig1 ** 2 / 2.) * self.time_unit
                                  + self.sig1 * brownian1 * np.sqrt(self.time_unit)))
            
        
    def put_payoff(self):
        """ Designed for put. But we can easily switch to call """
        self.payoff = np.maximum(self.strike - self.price1_matrix, np.zeros((self.M + 1, self.simulations),dtype=np.float64))
    
    
        def ls_calculation(self):
        self.value_matrix = np.zeros_like(self.payoff)
        self.value_matrix[-1, :] = self.payoff[-1, :]
        for t in range(self.M - 1, 0 , -1):
            choice = self.payoff[t,:] > 0
            #choice = self.payoff[t,:] > - 10 **1000
            X = self.price1_matrix[t,choice]
            Y = self.value_matrix[t + 1, choice] * self.discount
            regression = np.polyfit(X, Y, 5)
            continuation_value = np.polyval(regression, self.price1_matrix[t, :])
            self.value_matrix[t, :] = np.where(self.payoff[t, :] > continuation_value, self.payoff[t, :], 
                        self.value_matrix[t + 1, :] * self.discount)
    
        return self.value_matrix[1,:] * self.discount
    
    
example = LSTMC(36, 0.06, 0.2, 1, 50, 10000, 40)


#example = LSTMC(40, 0.06, 0.2, 2, 50, 10000, 40)
example.simulation()
example.put_payoff()
example.ls_calculation()
np.mean(example.ls_calculation())
